using System.Collections.Generic;
using UnityEngine;
using PCS.Common;
using Cysharp.Threading.Tasks;
using UnityEngine.Pool;

namespace PCS.Sound
{
    public class SoundManager : MonoSingleton<SoundManager>
    {
        private SoundConfig _soundConfig;

        IObjectPool<SoundPlayer> _soundPlayerPool;
        readonly List<SoundPlayer> _activeSoundPlayers = new List<SoundPlayer>();
        public readonly LinkedList<SoundPlayer> FrequentSoundEmitters = new();

        public async UniTask InitializeAsync()
        {
            DontDestroyOnLoad(gameObject);

            _soundConfig = await AddressableManager.LoadAssetAsync<SoundConfig>(typeof(SoundConfig).Name, false);

            if(_soundConfig == null )
            {
                Debug.LogError($"There is no {typeof(SoundConfig).Name} asset in addressables.");
                return;
            }    

            _soundPlayerPool = new ObjectPool<SoundPlayer>(
                CreateSoundPlayer,
                OnTakeFromPool,
                OnReturnedToPool,
                OnDestroyPoolObject,
                _soundConfig.CollectionCheck,
                _soundConfig.DefaultCapacity,
                _soundConfig.MaxPoolSize);
        }

        public bool CanPlaySound(SoundData data)
        {
            if (!data.FrequentSound) return true;

            if (FrequentSoundEmitters.Count >= _soundConfig.MaxSoundInstances)
            {
                try
                {
                    FrequentSoundEmitters.First.Value.Stop();
                    return true;
                }
                catch
                {
                    Debug.Log("SoundPlayer is already released.");
                }
                return false;
            }
            return true;
        }

        public SoundData TryGetSoundData(string name)
        {
            _soundConfig.SoundDataDictionary.TryGetValue(name, out var soundData);
            return soundData;
        }

        public SoundBuilder CreateSoundBuilder() => new SoundBuilder(this);

        public SoundPlayer Get()
        {
            return _soundPlayerPool.Get();
        }

        public void ReturnToPool(SoundPlayer player)
        {
            _soundPlayerPool.Release(player);
        }


        private SoundPlayer CreateSoundPlayer()
        {
            var soundPlayer = Instantiate(_soundConfig.SoundPlayerPrefab);
            if(soundPlayer == null)
            {
                Debug.LogError("SoundPlayerPrefab is not set in the SoundConfig. Create Object and add Component is not recommanded. For performance, set SoundPlayerPrefab.");
                soundPlayer = new GameObject("SoundPlayer_AutoGenerated", typeof(SoundPlayer),typeof(AudioSource)).GetComponent<SoundPlayer>();
            }
            soundPlayer.gameObject.SetActive(false);
            return soundPlayer;
        }

        private void OnTakeFromPool(SoundPlayer player)
        {
            player.gameObject.SetActive(true);
            _activeSoundPlayers.Add(player);
        }

        private void OnReturnedToPool(SoundPlayer player)
        {
            player.gameObject.SetActive(false);
            _activeSoundPlayers.Remove(player);
        }

        private void OnDestroyPoolObject(SoundPlayer player)
        {
            Destroy(player.gameObject);
        }



    }
}